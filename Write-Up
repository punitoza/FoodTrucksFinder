Food Trucks Finder - WhatI would do differently if I was building this app as a full scale web app

Feature changes

If the app is turned into a full scale web application from a command line app, there would be many use cases that
that can be supported which can't/very hard to be supported on a command line app. One of the most beneficial feature would
be that the web app version can support multiple users at the same time by a single instance of the application. The users
will be able to get the data over the internet which eliminates the need for installing the app on each user's machine.
The web app can also provide more advanced user interfaces as in like easy sorting and filtering, providing maps to locate 
the food trucks, getting the directions from a user's current location to a food truck, allowing to select multiple food 
trucks and marking them as favorites and so on.

Technical changes

1. In order to change this into a web application, I would start by choosing a web application framework which supports Model
   View Controller pattern. One of those is Spring MVC, but since the application is not CPU heavy, I would ultimately choose
   something like NodeJS (non-blocking I/O) to be able to server more users with less servers. 
2. I would choose a client side framework that supports MVC as well, the options include Sencha ExtJS/ React/React Native/
   Angular2 and more. 
3. At the time of development I would first start by designing the REST API including the input and output formats using 
   swagger. The REST API will be implemented by the app server and consumed by the UI.
4. Once the REST API is designed, the UI development and API implementation can proceed in parallel.
5. On the server side, I would write a controller that would provide REST endpoints and have a service layer that would
   fetch the data from the source. I would also implement basic security, logging, analytics.
6. On the client side, I will keep the application single page, design View layer with input elements, validators, display
   areas, etc. Design Controller layer that would handle click and other input events from the view elements and will also
   make REST API calls. I would design model classes with dynamic binding with input elements so that 
   controller does not have to explicitly get the data from view and set it into model objects and vice-versa. 
7. To deploy the web application I would use a public cloud platform such as GCP or AWS and docker for packaging the app.
8. I would use a container orchestrator tool like Kubernetes for load balancing, easy deployment of the app and to support 
   auto-scaling.

If the traffic on the web applicaton grows and demands optimizations to support growing concurrent users, I would 
look into these options and more:

a) Configure auto scaling parameters on Kubernetes so that multiple instances of the app servers get deployed.  
b) Implement a caching layer assuming that the data won't change for 24 hours and thus limit the calls to source.
c) Implement auto retry mechanism if there are issues getting data from source and implement circuit breaker pattern 
   to handle failures.

